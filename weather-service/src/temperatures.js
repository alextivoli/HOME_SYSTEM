'use strict';

import {DateTime} from 'luxon';

const RAW_VALUES = [
  ['00:00', 12.666666666666666], ['00:15', 12.666666666666666], ['00:30', 12.65], ['00:45', 12.666666666666666],
  ['01:00', 12.666666666666666], ['01:15', 12.633333333333333], ['01:30', 12.583333333333334], ['01:45', 12.549999999999999],
  ['02:00', 12.5], ['02:15', 12.433333333333332], ['02:30', 12.366666666666667], ['02:45', 12.249999999999998],
  ['03:00', 12.166666666666666], ['03:15', 12.133333333333335], ['03:30', 12.083333333333334], ['03:45', 12.033333333333333],
  ['04:00', 12.0], ['04:15', 11.983333333333334], ['04:30', 11.950000000000001], ['04:45', 11.933333333333335],
  ['05:00', 11.899999999999999], ['05:15', 11.916666666666666], ['05:30', 11.933333333333335], ['05:45', 11.933333333333332],
  ['06:00', 11.966666666666667], ['06:15', 11.966666666666667], ['06:30', 12.316666666666668], ['06:45', 12.65],
  ['07:00', 13.014285714285714], ['07:15', 13.533333333333333], ['07:30', 13.85], ['07:45', 14.199999999999998],
  ['08:00', 14.516666666666667], ['08:15', 14.950000000000001], ['08:30', 15.366666666666667], ['08:45', 15.816666666666665],
  ['09:00', 16.249999999999996], ['09:15', 16.583333333333332], ['09:30', 16.916666666666668], ['09:45', 17.28333333333333],
  ['10:00', 17.61666666666667], ['10:15', 17.866666666666667], ['10:30', 18.099999999999998], ['10:45', 18.316666666666666],
  ['11:00', 18.55], ['11:15', 18.75], ['11:30', 18.95], ['11:45', 19.150000000000002],
  ['12:00', 19.283333333333335], ['12:15', 19.433333333333334], ['12:30', 19.55], ['12:45', 19.666666666666668],
  ['13:00', 19.816666666666666], ['13:15', 19.8], ['13:30', 19.8], ['13:45', 19.816666666666666],
  ['14:00', 19.766666666666666], ['14:15', 19.666666666666664], ['14:30', 19.56666666666667], ['14:45', 19.45],
  ['15:00', 19.316666666666666], ['15:15', 19.166666666666668], ['15:30', 18.983333333333334], ['15:45', 18.783333333333335],
  ['16:00', 18.633333333333336], ['16:15', 18.183333333333334], ['16:30', 17.766666666666666], ['16:45', 17.333333333333332],
  ['17:00', 16.916666666666668], ['17:15', 16.4], ['17:30', 15.799999999999999], ['17:45', 15.200000000000001],
  ['18:00', 14.6], ['18:15', 14.333333333333334], ['18:30', 14.133333333333335], ['18:45', 13.950000000000001],
  ['19:00', 13.771428571428572], ['19:15', 13.816666666666665], ['19:30', 13.799999999999999], ['19:45', 13.799999999999999],
  ['20:00', 13.766666666666666], ['20:15', 13.733333333333333], ['20:30', 13.700000000000001], ['20:45', 13.65],
  ['21:00', 13.616666666666667], ['21:15', 13.583333333333334], ['21:30', 13.516666666666667], ['21:45', 13.483333333333334],
  ['22:00', 13.4], ['22:15', 13.299999999999999], ['22:30', 13.199999999999998], ['22:45', 13.1],
  ['23:00', 12.983333333333334], ['23:15', 12.866666666666667], ['23:30', 12.75], ['23:45', 12.633333333333333]
];

function timeComparator(e1, e2) {
  return e1[0] - e2[0];
}

const VALUES = RAW_VALUES
    .map(([t, v]) => {
      const dt = DateTime.fromISO(t);
      return [dt.hour * 100 + dt.minute, v];
    })
    .sort(timeComparator);

if (process.env.DEBUG === '1') {
  console.table(VALUES);
}

function binarySearch(list, item, cmp) {
  let min = 0;
  let max = list.length - 1;
  let guess;
  const half = max <= 2147483647 ?
      (a, b) => (a + b) >> 1 :
      (a, b) => Math.floor((a + b) / 2);

  while (min <= max) {
    guess = half(min, max);
    const c = cmp(list[guess], item);
    if (c === 0) {
      return guess;
    } else {
      if (c < 0) {
        min = guess + 1;
      } else {
        max = guess - 1;
      }
    }
  }

  return [max, min];
}

// credits to: https://stackoverflow.com/a/49434653
function randomBoxMuller(min, max, skew) {
  let u = 0, v = 0;
  while (u === 0) u = Math.random(); // Converting [0,1) to (0,1)
  while (v === 0) v = Math.random();
  let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v)

  num = num / 10.0 + 0.5; // Translate to 0 -> 1
  if (num > 1 || num < 0) {
    num = randn_bm(min, max, skew); // resample between 0 and 1 if out of range
  } else {
    num = Math.pow(num, skew); // Skew
    num *= max - min; // Stretch to fill range
    num += min; // offset to min
  }
  return num;
}

/**
 * Provides the temperature at the given time.
 * @param time {DateTime}
 * @return {number} The temperature
 */
export function temperatureAt(time) {
  const t = time.hour * 100 + time.minute;
  const res = binarySearch(VALUES, [t, 0], timeComparator);
  if (typeof res === 'number') {
    return VALUES[res][1];
  }

  // not a perfect result, but two close values
  let [i, j] = res;
  if (j >= VALUES.length) {
    j = 0;
  }
  let [t1, t2] = [VALUES[i][1], VALUES[j][1]];
  if (t1 > t2) {
    const tt = t1;
    t1 = t2;
    t2 = tt;
  }

  return randomBoxMuller(t1, t2, 1);
}
